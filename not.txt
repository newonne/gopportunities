executar projeto 
go run main.go

-------------------
uso de gin-gonic nesse projeto

gin gonic é um framework web em go, utilizado para construir apis e servidores web 
de alto desemepenho, a ferramenta oferece 

estrutura de roteamento eficiente
midddleware flexivel para autenticacao, erros 
manipulacao de JSON 
validacao e bind de request
recuperacao de erros
streaming e upload de arquivos
suporte para websockets

----------
tudo que esta no package, e acessivel ao package inteiro, nao preciso importar
um arquivo no outro para utilizar funcoes, variaveis e etc.. isso se estiver no mesmo package


----------
este comando basicamente remove pacotes que não é utilizado e adiciona pacotes que estao sendo utilizados
basicamente funciona como um comando coringa, últi para correcoes de imports.

go mod tidy
----------

este arquivo é parecido com o arquivo lock do javascript, que mostra o histórico
de dependencias, versoes e etc..

arquivo go.sum

----------

se tem qualquer funcao, variavel, constante, tipos de entidade
que comeca com a letra maiscula automaticamente ela esta sendo exportada do meu package

--------------- 
conceito basico de ponteiro em go 

quando eu defino em uma funcao que vai receber um ponteiro de algum tipo 
eu estou acessando o `cpf`(endereco de memoria) de onde esse tipo de origem foi criado para usar
seus recursos, nao e quem nem algumas linguages como javascript
 que voce manda uma casa inteira ( um tipo ou objeto ) para uma funcao.

 exemplo, o framework gin oferece um recurso de router, em que ele 
 pode dizer, olha estar aqui o router e o endereco dele (ponteiro ) ai voce
 acessa e faz o que quiser 

Mas por que não passar o valor diretamente?
 No caso do router, se fosse passado como valor, cada função que o recebesse trabalharia com uma cópia diferente, resultando
  em instâncias separadas e não compartilhadas.

  ---------------------------

  o package handler é onde ficará a lógica de cada rota, ou seja, cada rota vai lidar 
  com suas requisicoes


------------
banco de dados do projeto 

a pasta schemas do projeto e onde vai guardar as entidades de armazenamento

uso da ORM GORM para banco de dados

-----------
pasta config 

config - configuracao de banco de dados 
logger - ter como visualizar os avisos da aplicacao, erro, warning e etc..



parei em 2:55:00 de video // ao rodar o comando go run main.go diz que o C compiler gcc nao foi encontrado, resolver isso
https://www.youtube.com/watch?v=wyEYpX5U4Vg&ab_channel=Arthur404dev


------------

métodos em golang

se eu crio um método desse jeito 

func (l *Logger) Info(v ...interface{}) {
	l.info.Println(v...)
}
significa que a funcao Info vai receber seus parametros, porém
ela também vai pertencer a estrutura (struct) "logger", e assim 
consigo usar os recursos de logger dentro dela.


ja uma funcao normal não pertence a nenhuma estrutura, e se eu quiser usar 
alguma coisa de logger preciso passar como parametro..

func PrintMessage(l *Logger, msg string) {
    l.info.Println(msg)
}

----------------

logger

o arquivo logger em config serve para customizar mensagens de error, warning, info
e etc.. para oferecer mais informações, basicamente é isso. no caso, junto com o erro
consigo visualizar a hora e data.